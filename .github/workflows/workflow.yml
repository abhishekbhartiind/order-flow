name: OrderFlow CI

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]
on: push

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: [3.9]

    # Postgres (running in a Docker container)
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install backend (Python) dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r web/requirements.txt
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Install frontend dependencies
      run: |
        cd front
        npm ci
    - name: Start backend
      run: |
        # export some environment variables to help Django connect to Postgres (running in a Docker container)
        export POSTGRES_HOST=localhost
        export POSTGRES_NAME=orderflow_db
        export POSTGRES_USER=postgres
        export POSTGRES_PASSWORD=postgres

        # create the project database
        sudo apt update
        sudo apt install postgresql-client
        PGPASSWORD="$POSTGRES_PASSWORD" psql -h "$POSTGRES_HOST" -U "$POSTGRES_USER" -c "CREATE DATABASE $POSTGRES_NAME;"
        cd web

        # create Django and project tables in the project database
        python manage.py migrate

        # add products to the project database
        PGPASSWORD="$POSTGRES_PASSWORD" psql -h "$POSTGRES_HOST" -U "$POSTGRES_USER" -d "$POSTGRES_NAME" << EOF
        INSERT INTO products (name, price, image_url, description)
        VALUES
          ('Product 1', 29.99, 'http://localhost/images/product1.jpg', 'Product 1 description'),
          ('Product 2', 19.99, 'http://localhost/images/product2.jpg', 'Product 2 description'),
          ('Product 3', 9.99, 'http://localhost/images/product3.jpg', 'Product 3 description');
        EOF

        # DEBUGGING: Select from orderapi_product
        # PGPASSWORD="$POSTGRES_PASSWORD" psql -h "$POSTGRES_HOST" -U "$POSTGRES_USER" -d "$POSTGRES_NAME" -c "select * from orderapi_product"

        # start the Django server
        python manage.py runserver 0.0.0.0:8000 &
    - name: Run Cypress Tests
      uses: cypress-io/github-action@v5
      with:
        working-directory: ./front
        # wait-on: 'http://localhost:8000'
    - name: Start frontend
      run: |
        cd front
        npm start &
    - name: Run Selenium Tests (via pytest)
      run: |
        pytest .
